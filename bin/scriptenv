#!/usr/bin/env node

var fs = require('fs'),
    util = require('util'),
    pkg = require('../package'),
    args = process.argv.slice(2),
    puts = util.puts,
    dir2js = require('../lib/dirToJs');

function usage(msg) {
    msg = msg ? msg + '\n' : '';
    puts(msg + 'Usage: scriptenv <dirname> [options]\n\n' +
         ' --nowrap,  -n            don\'t wrap each file in a closure\n' +
         ' --scope    -s <scopeVar> name of the variable the closure should be applied to\n' +
         ' --exclude, -e <regExp>   exclude files/dirs matching\n' +
         ' --closure, -c            use obj["prop"] to allow use of the closure compiler\n' +
         ' --respect, -r            do not overwrite properties if they are set\n' +
         ' --inspect, -i            show a util.inspect printed version of the scriptenv\n' +
         ' --append,  -a <at:file>  append a file: --append foo:main.js\n' +
         ' --cat,     -c <dir>      cat <dir> as an ordered .js file\n' +
         '                                                                                   (v' + pkg.version + ')');
}

(function main() {
    if (args.length < 1) return usage();
    var options = {},
        dir,
        lstat,
        err = [];

    options.append = '';
    for (var i = 0; i < args.length; i += 1) {
        var arg = args[i];
        if (/^--?no?w?r?a?p?/.test(arg)) options.nowrap = true;
        else if (/^--?sc?o?p?e?/.test(arg)) {
            options.scope = args[i + 1];
            i += 1;
        } else if (/^--?ex?c?l?u?d?e?/.test(arg)) {
            var rx = args[i + 1];
            if (typeof rx === 'string') rx = new RegExp(rx);
            options.exclude = rx;
            i += 1;
        } else if (/^--?clo?s?u?r?e?/.test(arg)) {
            options.closure = true;
        } else if (/^--?cat?/.test(arg)) {
            options.cat = true;
        } else if (/^--?de?f?i?n?e?d?/.test(arg)) {
            options.defined = true;
        } else if (/^--?ap?p?e?n?d?/.test(arg)) {
            options.append = args[i + 1];
            i += 1;
        } else if (/^--?in?s?p?e?c?t?/.test(arg)) {
            options.inspect = true;
        } else if (/^--?ma?r?k?d?o?w?n?/.test(arg)) {
            options.markdown = true;
        } else if (/^-/.test(arg)) {
            return usage();
        } else {
            dir = arg;
        }
    }

    try {
        lstat = fs.lstatSync(dir);
    } catch (e) {
        err.push(e);
    }

    if (!lstat || !lstat.isDirectory()) {
        return usage('Not a directory: ' + dir);
    }

    if (options.cat) {
        return puts(dir2js(dir, options));
    }

    dir = dir.replace(/\/+$/, '');
    var scriptenv = require('../index'),
        code = scriptenv.code.call(this, dir, options),
        evalCode;

    function evalAndPrint() {
        try {
            evalCode = scriptenv.call(this, dir, options);
        } catch (e) {
            err.push(e);
        }

        if (options.inspect) code = util.inspect(evalCode, 0, 10, 1);
        else code += '\n' + util.inspect(evalCode , 0, 10).replace(/^/mg, '// ');
        puts(code);

        if (err.length) err.map(function (e) {
            console.warn(e.stack);
        });
    }

    if (!options.inspect) return evalAndPrint();

    require('jsdom').env('<html><head></head><body><h1>Hello</h1><p id="p1">p1</p></body></html>', function (errors, window) {
        global.window = window;
        global.document = window.document;
        evalAndPrint();
        window.close();
    });
}());

// vi: ft=javascript

